// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: /Users/nelsongou/Personal/Harker/11th Grade/Compilers/Scanner_JFlex/src/Scanner.flex

package scanner;

/**
 * This file defines a simple lexer for the Compilers course
 * which uses regEx for lexical token specifications.
 * @author William Zhang
 * @author Nelson Gou
 * @version 9/11/23
 */

import java.io.*;


@SuppressWarnings("fallthrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\1\1\7\0\1\2\4\3\22\0\1\2\16\0"+
    "\1\4\12\0\1\5\1\0\1\6\1\0\1\7\3\0"+
    "\1\10\1\0\1\11\1\12\2\0\1\13\1\14\3\0"+
    "\1\15\23\0\1\16\1\17\1\20\1\21\1\22\1\0"+
    "\1\23\1\24\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\0\1\34\1\35\1\36\1\37\1\0"+
    "\1\40\1\41\1\42\13\0\1\3\32\0\1\2\u01df\0"+
    "\1\2\177\0\13\2\35\0\2\3\5\0\1\2\57\0"+
    "\1\2\240\0\1\2\377\0\u0100\43";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\242\0\1\3\27\0\1\4"+
    "\12\0\1\4\12\0\1\5\13\0\1\3\1\5\77\0"+
    "\1\6\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c"+
    "\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc"+
    "\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc"+
    "\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc"+
    "\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c"+
    "\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c"+
    "\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c"+
    "\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c"+
    "\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c"+
    "\0\u0fc0\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc"+
    "\0\u10e0\0\u1104\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc"+
    "\0\u1200\0\u1224\0\u1248\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc"+
    "\0\u1320\0\u1344\0\u1368\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c"+
    "\0\u1440\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c"+
    "\0\u1560\0\u1584\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c"+
    "\0\u1680\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c"+
    "\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c"+
    "\0\u18c0\0\u18e4\0\u1908\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc"+
    "\0\u19e0\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94\0\u1320\0\u1ab8"+
    "\0\u1adc\0\u1b00\0\u1b24\0\u1b48\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8"+
    "\0\u1bfc\0\44\0\u1c20\0\u1c44\0\u1c68\0\u1c8c\0\u1cb0\0\u1cd4"+
    "\0\u1cf8\0\u1d1c\0\u1d40\0\u1d64\0\u1758\0\u1758\0\u1d88\0\u1dac"+
    "\0\u1dd0\0\u1df4\0\u1e18\0\u1e3c\0\u1e60\0\u1e84\0\u1ea8\0\u1ecc"+
    "\0\u18e4\0\u18e4\0\u1ef0\0\u1f14\0\u1f38\0\u1f5c\0\u1f80\0\u1fa4"+
    "\0\u1fc8\0\u1fec\0\u2010\0\u2034\0\u2058\0\u207c\0\u20a0\0\u20c4"+
    "\0\u20e8\0\u210c\0\u2130\0\u2154\0\u2178\0\u219c\0\u21c0\0\u21e4"+
    "\0\u2208\0\u222c\0\u2250\0\u2274\0\u2298\0\u22bc\0\u22e0\0\u2304"+
    "\0\u2328\0\u234c\0\u2370\0\u2394\0\u23b8\0\u23dc\0\u2400\0\u2424"+
    "\0\u2448\0\u246c\0\u2490\0\u24b4\0\u24d8\0\u24fc\0\u2520\0\u2544"+
    "\0\u2568\0\u258c\0\u25b0\0\u25d4\0\u25f8\0\u261c\0\u2640\0\u2664"+
    "\0\u2688\0\u26ac\0\u26d0\0\u26f4\0\u2718\0\u273c\0\u2760\0\u2784"+
    "\0\u27a8\0\u1758\0\u27cc\0\u27f0\0\u2814\0\u2838\0\u285c\0\u2880"+
    "\0\u28a4\0\u28c8\0\u28ec\0\u2910\0\u2934\0\u2958\0\u297c\0\u29a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\2\2\1\4\34\2\47\0\2\3\44\0"+
    "\1\5\11\0\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\0\1\15\1\16\1\17\1\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\21\0\1\26\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\0\1\35"+
    "\1\36\1\37\1\0\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\41\0\1\46\1\47\22\0\1\50\5\0\1\51"+
    "\2\0\1\52\2\0\1\53\31\0\1\54\1\0\1\55"+
    "\7\0\1\56\42\0\1\57\34\0\1\60\14\0\1\61"+
    "\26\0\1\62\51\0\1\63\5\0\1\64\23\0\1\65"+
    "\6\0\1\66\34\0\1\67\3\0\1\70\37\0\1\71"+
    "\64\0\1\72\22\0\1\73\16\0\1\74\34\0\1\75"+
    "\3\0\1\76\33\0\1\77\2\0\1\100\10\0\1\101"+
    "\41\0\1\101\31\0\1\102\2\0\1\103\54\0\1\104"+
    "\1\105\22\0\1\106\5\0\1\107\2\0\1\110\2\0"+
    "\1\111\31\0\1\112\1\0\1\113\7\0\1\114\42\0"+
    "\1\115\34\0\1\116\14\0\1\117\26\0\1\120\51\0"+
    "\1\121\5\0\1\122\23\0\1\123\6\0\1\124\34\0"+
    "\1\125\3\0\1\126\37\0\1\127\64\0\1\130\22\0"+
    "\1\131\16\0\1\132\34\0\1\133\3\0\1\134\33\0"+
    "\1\135\2\0\1\136\10\0\1\137\41\0\1\137\31\0"+
    "\1\140\2\0\1\141\50\0\1\142\47\0\1\143\43\0"+
    "\1\144\23\0\1\145\57\0\1\146\41\0\1\147\1\150"+
    "\1\0\1\151\15\0\1\152\73\0\1\153\26\0\1\74"+
    "\43\0\1\154\54\0\1\155\37\0\1\156\43\0\1\157"+
    "\34\0\1\160\47\0\1\161\52\0\1\162\3\0\1\163"+
    "\37\0\1\164\43\0\1\165\33\0\1\166\52\0\1\167"+
    "\32\0\1\170\62\0\1\171\42\0\1\172\33\0\1\173"+
    "\55\0\1\174\45\0\1\175\40\0\1\176\34\0\1\172"+
    "\33\0\1\177\45\0\1\200\54\0\1\201\47\0\1\202"+
    "\43\0\1\203\23\0\1\204\57\0\1\205\41\0\1\206"+
    "\1\207\1\0\1\210\15\0\1\211\73\0\1\212\26\0"+
    "\1\132\43\0\1\213\54\0\1\214\37\0\1\215\43\0"+
    "\1\216\34\0\1\217\47\0\1\220\52\0\1\221\3\0"+
    "\1\222\37\0\1\223\43\0\1\224\33\0\1\225\52\0"+
    "\1\226\32\0\1\227\62\0\1\230\42\0\1\231\33\0"+
    "\1\232\55\0\1\233\45\0\1\234\40\0\1\235\34\0"+
    "\1\231\33\0\1\236\45\0\1\237\52\0\1\54\37\0"+
    "\1\240\41\0\1\241\52\0\1\242\51\0\1\156\34\0"+
    "\1\243\51\0\1\244\47\0\1\245\1\0\3\152\1\0"+
    "\1\246\2\152\1\247\33\152\21\0\1\250\52\0\1\251"+
    "\36\0\1\252\42\0\1\172\45\0\1\253\43\0\1\167"+
    "\50\0\1\172\36\0\1\254\56\0\1\255\33\0\1\172"+
    "\33\0\1\256\52\0\1\257\40\0\1\172\32\0\1\260"+
    "\57\0\1\261\16\0\3\262\1\0\1\263\2\262\1\247"+
    "\33\262\34\0\1\264\44\0\1\265\45\0\1\266\34\0"+
    "\1\167\31\0\1\267\64\0\1\270\35\0\1\112\37\0"+
    "\1\271\41\0\1\272\52\0\1\273\51\0\1\215\34\0"+
    "\1\274\51\0\1\275\47\0\1\276\1\0\3\211\1\0"+
    "\3\211\1\277\33\211\21\0\1\300\52\0\1\301\36\0"+
    "\1\302\42\0\1\231\45\0\1\303\43\0\1\226\50\0"+
    "\1\231\36\0\1\304\56\0\1\305\33\0\1\231\33\0"+
    "\1\306\52\0\1\307\40\0\1\231\32\0\1\310\57\0"+
    "\1\311\25\0\1\312\67\0\1\313\44\0\1\314\45\0"+
    "\1\315\34\0\1\226\31\0\1\316\64\0\1\317\37\0"+
    "\1\320\34\0\1\321\51\0\1\322\34\0\1\323\43\0"+
    "\1\324\55\0\1\62\7\0\3\152\1\0\1\246\2\152"+
    "\1\325\33\152\1\0\3\326\1\0\1\327\1\326\1\330"+
    "\1\247\33\326\35\0\1\331\41\0\1\332\45\0\1\333"+
    "\33\0\1\334\56\0\1\63\14\0\1\335\56\0\1\336"+
    "\36\0\1\54\43\0\1\337\56\0\1\340\12\0\3\262"+
    "\1\0\1\263\2\262\1\341\33\262\1\0\3\262\1\0"+
    "\1\263\2\262\1\342\33\262\12\0\1\343\1\0\1\344"+
    "\50\0\1\167\37\0\1\345\45\0\1\346\51\0\1\172"+
    "\51\0\1\347\34\0\1\350\51\0\1\351\34\0\1\352"+
    "\43\0\1\353\55\0\1\120\43\0\1\354\41\0\1\355"+
    "\45\0\1\356\33\0\1\357\56\0\1\121\14\0\1\360"+
    "\56\0\1\361\36\0\1\112\43\0\1\362\56\0\1\363"+
    "\23\0\1\364\1\0\1\365\50\0\1\226\37\0\1\366"+
    "\45\0\1\367\51\0\1\231\53\0\1\172\41\0\1\370"+
    "\33\0\1\101\52\0\1\371\43\0\1\372\12\0\3\326"+
    "\1\0\1\327\1\326\1\330\1\325\33\326\1\0\3\326"+
    "\1\0\1\373\1\326\1\330\1\247\33\326\26\0\1\374"+
    "\53\0\1\375\24\0\1\376\63\0\1\172\44\0\1\377"+
    "\31\0\1\u0100\54\0\1\167\30\0\1\172\36\0\1\u0101"+
    "\57\0\1\u0102\42\0\1\u0103\47\0\1\u0104\42\0\1\231"+
    "\41\0\1\u0105\33\0\1\137\52\0\1\u0106\43\0\1\u0107"+
    "\37\0\1\u0108\53\0\1\u0109\24\0\1\u010a\63\0\1\231"+
    "\44\0\1\u010b\31\0\1\u010c\54\0\1\226\30\0\1\231"+
    "\36\0\1\u010d\57\0\1\u010e\42\0\1\u010f\47\0\1\u0110"+
    "\42\0\1\u0111\45\0\1\74\43\0\1\54\5\0\1\326"+
    "\1\u0112\1\326\1\0\1\327\1\326\1\330\1\325\33\326"+
    "\34\0\1\u0113\47\0\1\u0114\42\0\1\240\32\0\1\u0115"+
    "\47\0\1\u0116\54\0\1\74\40\0\1\u0117\37\0\1\u0118"+
    "\46\0\1\u0119\41\0\1\u011a\45\0\1\132\43\0\1\112"+
    "\40\0\1\u011b\47\0\1\u011c\42\0\1\271\32\0\1\u011d"+
    "\47\0\1\u011e\54\0\1\132\40\0\1\u011f\37\0\1\u0120"+
    "\46\0\1\u0121\47\0\1\172\1\0\3\326\1\0\1\327"+
    "\1\326\1\330\1\u0122\33\326\37\0\1\u0123\41\0\1\167"+
    "\36\0\1\u0124\37\0\1\u0125\54\0\1\74\46\0\1\334"+
    "\26\0\1\320\63\0\1\231\37\0\1\u0126\41\0\1\226"+
    "\36\0\1\u0127\37\0\1\u0128\54\0\1\132\46\0\1\357"+
    "\26\0\1\347\46\0\1\u0129\37\0\1\170\34\0\1\u012a"+
    "\56\0\1\u012b\37\0\1\227\34\0\1\u012c\63\0\1\u012d"+
    "\32\0\1\u012e\54\0\1\u012f\32\0\1\u0130\53\0\1\172"+
    "\37\0\1\376\47\0\1\231\37\0\1\u010a\16\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10692];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\242\0\1\1\27\0\1\1\12\0"+
    "\1\11\12\0\1\1\13\0\2\1\77\0\1\1\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return "EOF";
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return "UNKNOWN\t\t" + (yyline+1) + " " + (yycolumn+1) + " \t\t" + yytext();
            }
          // fall through
          case 7: break;
          case 2:
            { /* eat whitespace and do nothing */
            }
          // fall through
          case 8: break;
          case 3:
            { return "START\t\t" + (yyline+1) + " " + (yycolumn+1) + " \t\t" + yytext();
            }
          // fall through
          case 9: break;
          case 4:
            { return "END\t\t\t" + (yyline+1) + " " + (yycolumn+1) + " \t\t" + yytext();
            }
          // fall through
          case 10: break;
          case 5:
            { return "SELF\t\t"  + (yyline+1) + " " + (yycolumn+1) + " \t\t" + yytext();
            }
          // fall through
          case 11: break;
          case 6:
            { return "TAG\t\t\t" + (yyline+1) + " " + (yycolumn+1) + " \t\t" + yytext();
            }
          // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
